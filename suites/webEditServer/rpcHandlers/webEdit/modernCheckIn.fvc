FrontierVcsFile:3:scpt:suites.webEditServer.rpcHandlers.webEdit.modernCheckIn

on modernCheckIn (userName, password, adrObject, data, objectType, note="") {
	«This is a new check-in interface. It's modern in that it's cleaner: rather than returning a string indicating success or failure, it returns a struct with information. This check-in interface takes the same arguments as the original check-in interface, which still exists and is still supported. What this interface allows you to do is write your own client-side code for checking in objects.
		«Contents of the struct:
			«resultCode -- a number.
				«1 -- successful check-in.
				«2 -- bad username or password. Failure.
				«3 -- checked out by another user. Failure.
				«4 -- parent or grandparent (etc.) is checked out by another user. Failure.
				«5 -- child or grandchild (etc.) is checked out by another user. Failure.
				«6 -- item not checked out. Failure.
			«errorString -- if successful, it's empty. Otherwise it's a human-friendly error message.
			«resultString -- if successful, a human-friendly success message.
			«checkedOutBy -- if the object, or ancestor or descendant of the object, is currently checked out (see resultCodes #3, 4, and 5), this is the username of the person who has custody.
			«flCheckedIn -- a simple boolean that indicates success or failure. If resultCode #1, then this is true, otherwise it's false.
			«checkedOutAncestor -- if resultCode #4, this is the address of the ancestor that's already checked out.
			«checkedOutDescendant -- if result #5, this is the address of the descendant that's already checked out.
		«It calls the same callbacks as the older check-in interface.
		«9/24/99; 11:28:35 AM by PBS
	
	local (adrPreCallback = @user.webEditServer.callbacks.preCheckIn);
	local (adrCallback = @user.webEditServer.callbacks.checkIn);
	local (now = clock.now ());
	
	local (resultTable); //this is the struct that will be returned
	
	bundle { //initialize the returned struct
		new (tableType, @resultTable);
		resultTable.resultCode = 0;
		resultTable.errorString = "";
		resultTable.resultString = "";
		resultTable.checkedOutBy = "";
		resultTable.flCheckedIn = false;
		resultTable.checkedOutAncestor = "";
		resultTable.checkedOutDescendant = ""};
	
	if not (people.authenticateUser (userName, password, "WebEdit")) {
		resultTable.resultCode = 2;
		resultTable.errorString = "Can't check in " + adrObject + " because an invalid username or password was supplied.";
		return (resultTable)};
	if not (people.authenticateUser (userName, password, "Custody")) {
		resultTable.resultCode = 2;
		resultTable.errorString = "Can't check in " + adrObject + " because an invalid username or password was supplied.";
		return (resultTable)};
	
	adrObject = webEditServer.fixGuestDbAdr (adrObject);
	
	on checkForAncestor () {
		local (adrTable = @user.custody.objects);
		for i = 1 to sizeOf (adrTable^) {
			local (adrItem = nameOf (adrTable^ [i]));
			if defined (adrItem^) {
				if table.tableContains (adrItem, adrObject) { //found an ancestor
					resultTable.checkedOutAncestor = adrItem;
					resultTable.checkedOutBy = adrTable^ [i].user;
					return (true)}}}; //an ancestor was found
		return (false)};
	on checkForDescendant () {
		if typeOf (adrObject^) != tableType {
			return (false)};
		local (adrTable = @user.custody.objects);
		for i = 1 to sizeOf (adrTable^) {
			local (adrItem = nameOf (adrTable^ [i]));
			if defined (adrItem^) {
				if typeOf (adrObject^) == tableType {
					if table.tableContains (adrObject, adrItem) { //found a descendant
						resultTable.checkedOutDescendant = adrItem;
						resultTable.checkedOutBy = adrTable^ [i].user;
						return (true)}}}};
		return (false)};
	
	«Make sure the object is checked out by this user, if the object already exists.
	if defined (adrObject^) {
		if not (custody.isCheckedOutByUser (adrObject, userName)) {
			if defined (user.custody.objects.[adrObject]) { //is it checked out by another user?
				resultTable.resultCode = 3;
				resultTable.errorString = "Can't check in " + adrObject + " because it's been checked out by another user.";
				resultTable.checkedOutBy = user.custody.objects.[adrObject].user;
				return (resultTable)}
			else { //it hasn't been checked out at all
				if checkForAncestor () {
					resultTable.errorString = "Can't check out \"" + adrObject + "\" because a table containing this item is already checked out.";
					resultTable.resultCode = 4;
					return (resultTable)};
				if checkForDescendant () {
					resultTable.resultCode = 5;
					resultTable.errorString = "Can't check out \"" + adrObject + "\" because it contains objects that are already checked out.";
					return (resultTable)};
				
				resultTable.resultCode = 6;
				resultTable.errorString = "Can't check in " + adrObject + " because " + userName + " has not checked it out.";
				return (resultTable)}}}
	else { //make sure a parent or grandparent (etc.) isn't already checked out
		if checkForAncestor () {
			resultTable.errorString = "Can't check out \"" + adrObject + "\" because a table containing this item is already checked out.";
			resultTable.resultCode = 4;
			return (resultTable)}};
	
	data = fatPages.decode (@data);
	setBinaryType (@data, string4 (objectType));
	unpack (@data, @data);
	
	webEditServer.callbackLoop (adrPreCallback, adrObject, userName, now, "");
	
	custody.checkIn (userName, password, string (address (adrObject)));
	table.assign (address (adrObject), data);
	
	webEditServer.callbackLoop (adrCallback, adrObject, userName, now, note);
	
	«Add to the imported objects log.
	export.addToLog (adrObject, notes:"From " + username);
	
	filemenu.saveMyRoot (adrobject);
	
	«The check-in was successful.
	resultTable.resultCode = 1;
	resultTable.flCheckedIn = true;
	resultTable.resultString = adrObject + " has been checked in.";
	
	return (resultTable)}


