FrontierVcsFile:3:scpt:suites.custody.checkOut

on checkOut (userName, password, adrObject, timeOutMinutes=nil) {
	«Check out an item.
		«Wed, Jun 10, 1998 at 5:46:27 PM by PBS
	
	custody.authenticate (userName, password, adrObject, true);
	
	local (adrTable = @user.custody.objects, i);
	local (currentDate = clock.now ());
	local (flFound = false);
	
	custody.lockObjectsTable (); //get a semaphore lock on the objects table
	custody.cleanUpObjectsTable (); //clean up timed-out objects
	
	if defined (adrTable^.[adrObject]) { //is the object already checked out?
		if string.lower (userName) != string.lower (adrTable^.[adrObject].user) {
			custody.unlockObjectsTable (); //unlock the semaphore
			scriptError ("Can't check out \"" + adrObject + "\" because it's already checked out by " + adrTable^.[adrObject].user + ".")}
		else {
			flFound = true}};
	
	if not flFound { //look for parents and children of adrObject
		for i = 1 to sizeOf (adrTable^) {
			local (adrItem = nameOf (adrTable^ [i]));
			if defined (adrItem^) {
				if typeOf (adrItem^) == tableType {
					if table.tableContains (adrItem, adrObject) { //found an ancestor
						custody.unlockObjectsTable (); //unlock the semaphore
						scriptError ("Can't check out \"" + adrObject + "\" because a table containing this item is already checked out.")}};
				if typeOf (adrObject^) == tableType {
					if table.tableContains (adrObject, adrItem) { //found a descendant
						custody.unlockObjectsTable (); //unlock the semaphore
						scriptError ("Can't check out \"" + adrObject + "\" because it contains objects that are already checked out.")}}}}};
	
	bundle { //create new check-out entry
		new (tableType, @adrTable^.[adrObject]);
		adrTable^.[adrObject].user = userName;
		adrTable^.[adrObject].checkedOutDate = clock.now ();
		if timeOutMinutes != nil {
			adrTable^.[adrObject].timeOutMinutes = timeOutMinutes}};
	
	custody.unlockObjectsTable (); //unlock the semaphore
	
	log.add (adrObject + " checked out by " + userName, "Custody"); //log the check-out
	
	return (true)}


