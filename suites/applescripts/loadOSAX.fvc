FrontierVcsFile:3:scpt:suites.applescripts.loadOSAX

on loadOSAX (f) {
	local (extensionsTable = @system.extensions);
	local (bytesLoaded = 0);
	local (foundAtLeastOne = false);
	local (adrFirstLoadedCMD = nil);
	local (confirmations = true);
	local (aeteParsed = false);
	local (resType = 'osax');
	
	applescripts.init ();
	local (ct, i, resName, resData);
	ct = rez.countResources (f, resType);
	for i = 1 to ct {
		if rez.getNthResource (f, resType, i, @resName, @resData) {
			foundAtLeastOne = true;
			
			local (adrTable = @system.extensions);
			if not defined (adrTable^) {
				new (tableType, adrTable)};
			adrTable = @adrTable^.[file.fileFromPath (f)];
			if not defined (adrTable^) {
				new (tableType, adrTable)};
			
			if not aeteParsed { «a hacked up copy of commercial.parseAete
				on parseAete (appPath, adrTable) { «parse the app's aete resource and build a verb table
					«version 2.1, copyright © 1992, 1993 UserLand Software Inc.
						«9/24/92 dmb - first cut parsing the application aete resource directly
						«2/11/93 dmb - updated for latest aete changes. handle special class properties.
						«7/09/93 dmb - coerce parameter types. avoid language reserved word collisions
						«7/30/93 dmb - add " = nil" to optional parameter definitions
						«8/10/93 dmb - don't create items with names that match objectModel scripts
						«9/02/93 dmb - handle 'c@#^' psuedo property
						«9/15/93 dmb - fixed bug in 'c@#^' handling and post processing
					local (aete, ix = 1);
					on getshort () {
						local (n);
						rollbeachball ();
						n = number (binary (string.mid (aete, ix, 2)));
						ix = ix + 2;
						return (n)};
					on getstring () {
						local (n, s);
						rollbeachball ();
						n = number (string.nthChar (aete, ix));
						s = string.mid (aete, ix + 1, n);
						ix = ix + n + 1;
						return (s)};
					on getstring4 () {
						local (x);
						rollbeachball ();
						x = string4 (string.mid (aete, ix, 4));
						ix = ix + 4;
						return (x)};
					on getname () {
						local (ixSpace, x);
						x = string.lower (getstring ());
						while string.countWords (x) > 1 { «make it an innerCase identifier
							ixSpace = string.patternMatch (' ', x);
							ch = string.upper (string.nthChar (x, ixSpace + 1));
							x= string.firstWord (x) + ch + string.mid (x, ixSpace + 2, infinity)};
						msg (x);
						return (x)};
					on skipstring () {
						getstring ()};
					on skipbytes (n) {
						ix = ix + n};
					on align () {
						if ix % 2 == 0 { «remember, we're in a 1-based world, so this is an odd byte
							++ix}};
					on assignUnique (name, adrValue) {
						on sameValue (adr1, adr2) {
							if typeOf (adr1^) != typeOf (adr2^) {
								return (false)};
							return (adr1^ == adr2^)};
						local (adr, ct = 1);
						adr = @objectModel.[name];
						if defined (adr^) {
							if sameValue (adr, adrValue) {
								return (false)};
							if typeOf (adr^) == scriptType {
								return (false)}};
						adr = @adrTable^.[name];
						while defined (adr^) {
							if sameValue (adr, adrValue) {
								return (false)};
							adr = @adrTable^.[name + ct++]};
						table.assign (adr, adrValue^);
						return (true)};
					on parseEvents () {
						local (ixevent, ctevents, eventprefix);
						on makeScript (onStatement, returnStatement, adr) {
							new (scriptType, adr);
							target.set (adr);
							op.setLineText (onStatement);
							op.insert (returnStatement, right);
							op.go (left, 1);
							window.zoom (adr);
							close (adr);
							return (true)};
						on makeName (type) {
							«based on the direct parameter's type, come up with a name for it
							case type {
								objspecType {
									return ("obj")};
								stringType {
									return ("s")};
								intType;
								longType {
									return ("n")};
								booleanType {
									return ("flag")};
								aliasType;
								filespecType {
									return ("file")}}
							else {
								return ("x")}};
						on makeParam (name, type) {
							local (coercer);
							case type {
								objspecType {
									coercer = "objspec"};
								filespecType {
									coercer = "filespec"};
								aliasType {
									coercer = "alias"};
								'itxt';
								stringType {
									coercer = "string"};
								intType {
									coercer = "short"};
								longType {
									coercer = "long"};
								'savo';
								enumeratorType {
									coercer = "enum"};
								string4Type {
									coercer = "string4"};
								booleanType {
									coercer = "boolean"};
								singleType {
									coercer = "single"};
								doubleType {
									coercer = "double"};
								pointType {
									coercer = "point"};
								rectType {
									coercer = "rect"};
								rgbType {
									coercer = "rgb"}}
							else {
								return (name)};
							return (coercer + " (" + name + ')')};
						on mapSuite (code, adr) {
							case code {
								'reqd' {
									adr^ = @system.macintosh.required};
								'core' {
									adr^ = @system.macintosh.core};
								'misc' {
									adr^ = @system.macintosh.misc}}
							else {
								return (false)};
							return (true)};
						on mapEvent (adrScript, adrTable) {
							local {
								hdr;
								rtn;
								verb = nameOf (adrScript^);
								appName = nameOf (adrTable^);
								suiteName = string.nthField (adrScript, '.', string.countFields (adrScript, '.') - 1);
								adr = @adrTable^.[verb]};
							rollbeachball ();
							target.set (adrScript);
							msg (nameOf (adrScript^));
							op.firstSummit ();
							hdr = op.getLineText () - "appID";
							hdr = hdr - ", ";
							rtn = string.commentDelete (hdr - ("on " + verb + " ("));
							rtn = string.popTrailing (rtn, ' ');
							rtn = string.replaceAll (rtn, " = nil", "");
							rtn = string.replaceAll (rtn, " = 'no  '", "");
							if string.length (rtn) > 1 { «has at least one param
								rtn = ", " + rtn};
							rtn = suiteName + '.' + verb + " (" + appName + ".id" + rtn;
							rtn = "return (" + rtn + ')';
							return (makeScript (hdr, rtn, adr))};
						on parseParams (isFirst) {
							local (ixparam, flags);
							for ixparam = 1 to getshort () {
								paramname = getname ();
								if defined (system.compiler.language.keywords.[paramname]) {
									local (ch = string.upper (string.nthChar (paramname, 1)));
									paramname = eventname + ch + string.delete (paramname, 1, 1)};
								align ();
								id = getstring4 ();
								paramtype = getstring4 ();
								skipstring ();
								align ();
								«skipbytes (2) «param flags
								flags = getshort (); «param flags
								if not isFirst {
									hdr = hdr + ", "};
								hdr = hdr + paramname;
								if flags < 0 { «high bit set -> optional parameter
									hdr = hdr + " = nil"};
								rtn = rtn + ", '" + id + "', " + makeParam (paramname, paramtype);
								isFirst = false}};
						ctevents = getshort ();
						if mapSuite (suiteCode, @adrSuite) { «map all events of suite
							for i = 1 to sizeOf (adrSuite^) {
								mapEvent (@adrSuite^ [i], adrTable)}};
						eventprefix = "return (appleEvent (@" + nameOf (adrTable^) + ".code.AEVT";
						for ixevent = 1 to ctevents { «add / overwrite event provided
							local (eventname, comment, class, paramname, paramtype, id, hdr, rtn, adr);
							eventname = getname ();
							comment = getstring ();
							align ();
							class = getstring4 ();
							id = getstring4 ();
							adr = @adrTable^.[eventname];
							hdr = "on " + eventname + " (";
							rtn = eventprefix + class + id + ", '" + class + "', '" + id + "'";
							skipbytes (4); «reply type
							skipstring (); «reply description
							align ();
							skipbytes (2); «flags
							paramtype = getstring4 (); «direct param type
							skipstring (); «direct param description
							align ();
							skipbytes (2); «reply flags
							if paramtype != 'null' { «has a direct param
								local (paramname = makeName (paramtype));
								hdr = hdr + paramname;
								rtn = rtn + ", '----', " + makeParam (paramname, paramtype);
								parseParams (false)}
							else {
								parseParams (true)};
							hdr = hdr + ") «" + comment;
							rtn = rtn + "))";
							makeScript (hdr, rtn, adr)}};
					on parseClasses () {
						local (ixclass, x, description);
						on parseProperties () {
							local (ixproperty);
							for ixproperty = 1 to getshort () {
								local (s);
								name = getname ();
								align ();
								value = getstring4 ();
								if value == 'c@#!' { «kAESpecialClassProperties
									skipSpecialClass = true};
								if value == 'c@#^' { «same props & elements as class
									sameAsClass = getstring4 ();
									description = "all properties of " + sameAsClass + '*'} «append asterix for postprocessing f & r
								else {
									skipbytes (4); «property class
									description = name};
								s = getstring (); «what is it?
								if string.length (s) > 0 {
									description = description + " -- " + s};
								align ();
								skipbytes (2);
								if not skipSpecialClass {
									if value != 'c@#^' {
										assignUnique (name, @value)};
									op.insert (description, dir);
									dir = down}}};
						on parseElements () {
							local (ixelement, ixkeyform);
							if sameAsClass != 0 {
								op.insert ("all elements of " + sameAsClass + '*', dir);
								dir = down};
							for ixelement = 1 to getshort () {
								«skipbytes (4) «element class
								value = getstring4 ();
								if not skipSpecialClass {
									op.insert (string (value) + '*', dir); «append asterix for postprocessing f & r
									dir = down};
								for ixkeyform = 1 to getshort () {
									skipbytes (4)}}}; «ignore it
						target.set (@adrTable^.objectHierarchy);
						editMenu.setFontSize (9);
						dir == noDirection;
						for ixclass = 1 to getshort () {
							local (classname, classID, skipSpecialClass = false, sameAsClass = 0);
							classname = getname ();
							align ();
							classID = getstring4 ();
							description = classname + " -- " + getstring (); «the class description
							if dir == noDirection {
								op.setLineText (description)}
							else {
								op.insert (description, down)};
							dir = right;
							op.insert ("Properties:", dir);
							align ();
							parseProperties ();
							if dir == right { «nothing added
								op.deleteLine ()}
							else {
								op.go (left, 1)};
							if not skipSpecialClass {
								assignUnique (classname, @classID);
								op.insert ("Elements:", dir);
								dir = right}
							else {
								op.go (left, infinity);
								op.deleteLine ();
								dir = down};
							parseElements ();
							if dir == right { «nothing added
								op.deleteLine ()};
							op.go (left, infinity)};
						op.firstSummit ();
						target.clear ()};
					on parseComparisonOps () {
						local (ixcomparison);
						for ixcomparison = 1 to getshort () {
							skipstring ();
							align ();
							skipbytes (4);
							skipstring ();
							align ()}};
					on parseEnumerations () {
						local (ixEnumeration);
						on parseEnumerators () {
							local (ixenumerator);
							for ixEnumerator = 1 to getshort () {
								local (name, value, adr);
								name = getname ();
								align ();
								value = enum (getstring4 ());
								assignUnique (name, @value);
								«adr = @adrTable^.[name]
								«if defined (adr^) «name already used
									«if (typeOf (adr^) != binaryType) or (adr^ != value) «not a duplicate, use unique name
										«table.assign (table.uniqueName (name, adrTable), value)
								«else
									«adr^ = value
								skipstring ();
								align ()}};
						for ixEnumeration = 1 to getshort () {
							skipbytes (4);
							parseEnumerators ()}};
					on parseSuites () {
						local (ixsuite, suiteCode, dir);
						for ixsuite = 1 to getshort () {
							getstring (); «name of the suite
							skipstring (); «description
							align ();
							suiteCode = getstring4 ();
							skipbytes (4); «skip up to event array
							parseEvents ();
							parseClasses ();
							parseComparisonOps ();
							parseEnumerations ()}};
					bundle { «make sure the table exists
						if not defined (adrTable^) {
							new (tableType, adrTable)}};
					bundle { «set up the class hierarchy outline
						new (outlineType, @adrTable^.objectHierarchy)};
					bundle { «parse the resource
						local (name);
						if !rez.getNthResource (appPath, 'aete', 1, @name, @aete) {
							scriptError ("Couldn't find the resource.")};
						string.setWordChar (' '); «make sure it's normal
						skipbytes (6); «skip up to suite array
						parseSuites ()};
					bundle { «post-process the class hierarchy outline
						local (savedparams);
						
						table.assign (@savedparams, user.prefs.search); «save off
						user.prefs.search.wholewords = true;
						user.prefs.search.wraparound = true;
						
						on translateClasses (adrTable) {
							local (i, adr);
							for i = 1 to sizeof (adrTable^) {
								adr = @adrTable ^[i];
								msg (nameOf (adr^));
								if typeOf (adr^) == string4type {
									user.prefs.search.searchfor = string (adr^) + '*';
									user.prefs.search.replacewith = nameOf (adr^);
									search.reset ();
									search.replaceall ()}}};
						
						target.set (@adrTable^.objectHierarchy);
						translateClasses (adrTable);
						translateClasses (@objectModel);
						
						wp.setTextMode (false);
						op.firstSummit ();
						op.sort ();
						
						target.clear ();
						
						table.assign (@user.prefs.search, savedparams)}; «restore originals
					msg ("");
					window.open (adrTable);
					return (true)};
				parseAete (f, adrTable);
				aeteParsed = true};
			
			local (adrCode = @adrTable^.code);
			if not defined (adrCode^) {
				new (tableType, adrCode)};
			
			local (adrObject = @adrCode^.[resName]);
			«if not dialog.ask ("Address for new " + resType + "?", @adrObject)
				«return (false)
			
			if confirmations {
				if defined (adrObject^) {
					if not dialog.yesNo ("Replace the existing " + resType + " with new code?") {
						continue}}};
			
			adrObject^ = resData;
			setbinarytype (adrObject, 'UCMD');
			bytesLoaded = bytesLoaded + sizeOf (adrObject^);
			adrFirstLoadedCMD = adrObject}};
	return (adrFirstLoadedCMD)}


