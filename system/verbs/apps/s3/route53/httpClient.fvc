FrontierVcsFile:3:scpt:system.verbs.apps.s3.route53.httpClient

on httpClient (apiPath, method="GET", xmltext="") {
	«Changes
		«7/11/11; 7:53:22 PM by DW
			«Now works on Macintosh as well as Windows.
		«6/20/11; 4:14:44 PM by DW
			«Created.
	local (headers);
	new (tabletype, @headers);
	headers.Date = s3.route53.getDate ();
	bundle { //sign the string
		on hmac (data, key) {
			«Changes
				«3/27/06; 5:57:47 PM by LMO
					«Initial implementation, stolen from Digest::HMAC in Perl
			local (BLOCK_SIZE=64);
			on sha1 (data) {
				«See: http://www.spicynoodles.net/projects/crypto.html
				return (crypto.hashSHA1(data, false))};
			local(k_ipad, k_opad, i);
			if string.length (key) > BLOCK_SIZE {
				key = sha1 (key)};
			for i = 0 to BLOCK_SIZE-1 {
				if i < string.length(key) {
					«XOR characters of the key
					k_char = string.nthChar(key, i+1);
					k_ipad = k_ipad + char(bit.logicalXor(k_char, char(0x36)));
					k_opad = k_opad + char(bit.logicalXor(k_char, char(0x5c)))}
				else {
					«Pad out the rest of the block size length
					k_ipad = k_ipad + char(0x36);
					k_opad = k_opad + char(0x5c)}};
			return (sha1 (k_opad + sha1 (k_ipad + data)))};
		local (signature = base64.encode (hmac (headers.Date, user.s3.accounts.default.SecretAccessKey), infinity));
		headers.["X-Amzn-Authorization"] = "AWS3-HTTPS AWSAccessKeyId=" + user.s3.accounts.default.AWSAccessKeyId + ",Algorithm=HmacSHA1,Signature=" + signature};
	bundle { //make the call
		local (s, datatype, apiServer = "route53.amazonaws.com");
		bundle { //set datatype
			if xmltext == "" {
				datatype = ""}
			else {
				datatype = "text/xml"}};
		if system.environment.isMac {
			s = tcp.httpsClient (method, server:apiServer, path:apiPath, adrHdrTable:@headers, data:xmltext, datatype:datatype)}
		else {
			if system.environment.isWindows {
				s = tls.httpsClient (method, server:apiServer, path:apiPath, adrHdrTable:@headers, data:xmltext, datatype:datatype)}};
		return (s)}};
bundle { //test code
	httpClient ("/2011-05-05/hostedzone/Z3LV037TPQ6WL5")}


