FrontierVcsFile:3:scpt:system.verbs.apps.s3.ses.httpClient

on httpClient (method, bodytext) {
	«Changes
		«8/28/12; 8:50:11 PM by DW
			«Cribbed from Route53
				«POST / HTTP/1.1
				«Date: Thu, 18 Aug 2011 22:25:27 GMT
				«Host: email.us-east-1.amazonaws.com
				«Content-Type: application/x-www-form-urlencoded
				«X-Amzn-Authorization: AWS3 AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE,
					«Signature=yXx/wM1bESLuDErJ6HpZg9JK8Gjau7EUe4FWEfmhodo=,
					«Algorithm=HmacSHA256, SignedHeaders=Date;Host
				«Content-Length: 230
	local (adrdata = s3.ses.init (), apiServer = "email.us-east-1.amazonaws.com", headers, datatype = "application/x-www-form-urlencoded");
	new (tabletype, @headers);
	headers.Date = s3.route53.getDate ();
	headers.Host = apiServer;
	headers.["Content-Type"] = datatype;
	headers.["Content-Length"] = sizeof (bodytext);
	bundle { //sign the string
		on hmac (data, key) {
			«Changes
				«3/27/06; 5:57:47 PM by LMO
					«Initial implementation, stolen from Digest::HMAC in Perl
			local (BLOCK_SIZE=64);
			on sha1 (data) {
				«See: http://www.spicynoodles.net/projects/crypto.html
				return (crypto.hashSHA1(data, false))};
			local(k_ipad, k_opad, i);
			if string.length (key) > BLOCK_SIZE {
				key = sha1 (key)};
			for i = 0 to BLOCK_SIZE-1 {
				if i < string.length(key) {
					«XOR characters of the key
					k_char = string.nthChar(key, i+1);
					k_ipad = k_ipad + char(bit.logicalXor(k_char, char(0x36)));
					k_opad = k_opad + char(bit.logicalXor(k_char, char(0x5c)))}
				else {
					«Pad out the rest of the block size length
					k_ipad = k_ipad + char(0x36);
					k_opad = k_opad + char(0x5c)}};
			return (sha1 (k_opad + sha1 (k_ipad + data)))};
		local (signature = base64.encode (hmac (headers.Date, user.s3.accounts.default.SecretAccessKey), infinity));
		headers.["X-Amzn-Authorization"] = "AWS3-HTTPS AWSAccessKeyId=" + user.s3.accounts.default.AWSAccessKeyId + ",Algorithm=HmacSHA1,Signature=" + signature};
	bundle { //make the call
		local (s);
		if system.environment.isMac {
			s = tcp.httpsClient (method, server:apiServer, path:"", adrHdrTable:@headers, data:bodytext, datatype:datatype)}
		else {
			if system.environment.isWindows {
				s = tls.httpsClient (method, server:apiServer, path:"", adrHdrTable:@headers, data:bodytext, datatype:datatype)}};
		return (s)}};
bundle { //test code
	httpClient ("/2011-05-05/hostedzone/Z3LV037TPQ6WL5")}


