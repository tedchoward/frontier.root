FrontierVcsFile:3:scpt:system.verbs.builtins.xml.opml.getOpmlText

on getOpmlText (adrtable, title=nil, dateModified=nil, dateCreated=nil, valueName="value") {
	«Changes
		«2/26/12; 10:08:26 PM by DW
			«We weren't correctly generating dateModified. Also, add a comment at the head of the OPML saying what version of the program created, and the local time when it was last built.
		«2/14/12; 1:29:32 PM by DW
			«Give us a structure in tables and we'll return an OPML document that matches it. The valueName param tells us what to call the value of scalars in your table. 
	local (opmltext = "", indentlevel = 0);
	on add (s) {
		opmltext = opmltext + string.filledstring ("\t", indentlevel) + s + "\r"};
	on encode (s) {
		if system.environment.isMac {
			return (xml.entityEncode (latinToMac.macToLatin (s), true))}
		else {
			return (xml.entityEncode (s, true))}};
	on hassubs (adrtable) {
		local (adr);
		for adr in adrtable {
			if (typeof (adr^) == tabletype) and (sizeof (adr^) > 0) {
				return (true)}};
		return (false)};
	bundle { //add a comment saying what application generated the OPML
		local (appstring, versionstring = frontier.version ());
		bundle { //set appstring
			if system.environment.isRadio {
				appstring = "Radio UserLand "}
			else { //Frontier or OPML Editor
				local (flopmleditor = false);
				if defined (system.environment.isOpmlEditor) {
					if system.environment.isOpmlEditor {
						versionstring = opmleditor.data.version;
						flopmleditor = true}};
				if flopmleditor {
					appstring = "OPML Editor "}
				else {
					appstring = "UserLand Frontier "}};
			appstring = appstring + "v" + versionstring};
		add ("<!-- OPML generated by " + appstring + " on " + clock.now () + " -->\r\n")};
	add ("<opml version=\"2.0\">"); indentlevel++;
	bundle { //<head>
		add ("<head>"); indentlevel++;
		bundle { //title
			if title == nil {
				add ("<title>" + encode (nameof (adrtable^)) + "</title>")}
			else {
				add ("<title>" + encode (title) + "</title>")}};
		if dateModified != nil {
			add ("<dateModified>" + date.netstandardstring (dateModified) + "</dateModified>")};
		if dateCreated != nil {
			add ("<dateCreated>" + date.netstandardstring (dateCreated) + "</dateCreated>")};
		add ("</head>"); indentlevel--};
	bundle { //<body>
		add ("<body>"); indentlevel++;
		on addlevel (adrtable) {
			local (adr, linestart);
			for adr in adrtable {
				linestart = "<outline text=\"" + encode (nameof (adr^));
				if (typeof (adr^) == tabletype) and hassubs (adr) {
					add (linestart + "\">"); indentlevel++;
					addlevel (adr);
					add ("</outline>"); indentlevel--}
				else {
					if typeof (adr^) == tabletype {
						local (s = "", adrscalar);
						for adrscalar in adr {
							s = s + nameof (adrscalar^) + "=\"" + encode (string (adrscalar^)) + "\" "};
						add (linestart + "\" " + s + "/>")}
					else {
						add (linestart + "\" " + valueName + "=\"" + encode (string (adr^)) + "\" />")}}}};
		addlevel (adrtable);
		add ("</body>"); indentlevel--};
	add ("</opml>"); indentlevel--;
	return (opmltext)};
bundle { //test code
	local (s = getOpmlText (@scratchpad.tableOutline, valueName:"cname"));
	op.newOutlineObject (s, @scratchpad.myopmloutline);
	file.writewholefile (user.prefs.dropboxfolder + "Public:outlines:myDomains.opml", s)}


