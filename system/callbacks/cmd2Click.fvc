FrontierVcsFile:3:scpt:system.callbacks.cmd2Click

on cmd2Click (name) {
	«called when you cmd-double-click on an identifier
		«It enhances the default, built-in behavior of jumping to the named object.
		«It checks for the option key, and closes the front window if it's pressed.
		«If the name is a file rather than a db object, it will reveal it in the Finder
		«ssl change notes:
			«enhanced to walk up the script/outline hierarchy and check every "with" path
				«in an outline window, assume it's a oneLiner
			«added support for reserved constants, keywords & builtins
			«3/19/96: moved checkWith etc. to enhanced2click table to simplify distribution
			«6/17/95: added support for local scripts (via checkScript)
			«changes are Pioneerware by Scott S. Lawton
				«Internet: ssl@prefab.com, http://www.tiac.net/prefab/
		«dmb 8/15/96: integrated ssl's "enhanced2click" functionality
		«4.2 -- Wed, Dec 11, 1996 at 11:16:00 PM by DW
			«handles macros in web pages
	«New callbacks for cmd2click
		«Tue, Oct 7, 1997 at 11:37:49 AM by PBS
		«Callback script returns true if it handled the click,
		«then this script immediately returns true.
		«Otherwise, this script handles the click.
	«Changes:
		«4/20/01; 4:05:40 PM by JES
			«Allow callbacks to be addresses or addresses of addresses...
	on checkWith (name, callbackAction) {
		«walk up the script/outline hierarchy checking in "with" for a match: "table.[name]"
			«called by my cmd2click, control2click
		«Pioneerware by Scott S. Lawton
		«revisions
			«6/13/96: handle menuscripts
			«5/16/96: now handle an "object database map"
			«3/19/96: moved to enhanced2click table, updated paths
			«1/27/96 to handle double-clicking on part of the hierarchy within a single "with"
			«5/28/95 to handle comment in the "with"
			«5/15/95 to handle hierarchy within a single "with"
				«e.g. "with ObjectModel, QXP, defs"
				«(Actually, I only look at pairs.  It didn't seem worth the effort to test every combination.)
		«possible improvements
			«look for nested "with" (as I do for outlines & an "object database map"), e.g.
				«with Player
					«with Keys
			«look for all combinations with multiple "fields" (not just pairs), e.g.
				«with QXP, ObjectModel, defs
			«look at every "with" in an outline oneLiner
			«call Simple.window.frontmostType to handle menuscripts
				«but then the enhanced2click package wouldn't stand on its own
		
		local {
			categorizedName = name;
			theLine;
			space = " ";
			windowType = "Unknown"; « modified below...
			windowName = window.frontmost();
			whereAmI;
			displayStatus;
			leftOfSelection = 0;
			rightOfSelection = 0};
		try {
			«the following fails for a few cases, see Simple.window.frontmostType() ... the only one we need is handled in the else
			windowType = typeOf(windowName^)}
		else { « 6/13/96
			if window.isMenuScript(windowName) {
				windowType = scriptType}};
		on initialize() {
			displayStatus = op.getDisplay(); « want to restore it to original state
			op.setDisplay(false); « no need to show the user our travels
			case windowType {
				outlineType; « added 5/16/96 ==> changed to a case statement
				scriptType {
					whereAmI = op.getCursor()}}; « uniqueID, to restore at end
			
			if wp.inTextMode() { « doesn't apply to cmd2Click, but may to Jump
				wp.getSelect(@leftOfSelection, @rightOfSelection)}};
			«else: the left/right of selection are correct at zero
		on restoreOutline() {
			case windowType {
				outlineType; « added 5/16/96 ==> changed to a case statement
				scriptType {
					op.setCursor(whereAmI)}};
			wp.setTextMode(true);
			wp.setSelect(leftOfSelection, rightOfSelection);
			op.setDisplay(displayStatus)};
		on checkAllFields() {
			«globals
				«theLine     « which has the spaces removed
				«name
				«whereAmI
			local {
				comma = ",";
				fieldCount;
				previous;
				i};
			fieldCount = string.countFields(theLine, comma);
			for i = 1 to fieldCount {
				categorizedName = string.nthField(theLine, comma, i) + "." + name;
				if defined (categorizedName^) {
					restoreOutline();
					callbackAction^(categorizedName, true); « second parameter: yes it's in a "with"
					return (true)}};
			for i = 1 to fieldCount { « 5/15/95: check pairs next (less likely)
				previous = string.nthField(theLine, comma, i);
				for j = i+1 to fieldCount {
					categorizedName = previous + "." + string.nthField(theLine, comma, j) + "." + name;
					if defined (categorizedName^) {
						restoreOutline();
						callbackAction^(categorizedName, true); « second parameter: yes it's in a "with"
						return (true)}}};
			return false}; « won't get here if it finds a match
		on handleWith() {
			«1/27/96: call twice ==> moved to a subroutine
			theLine = string.popLeading( string.lower(op.getLineText()), space );
			if theLine beginsWith "with " {
				theLine = string.commentDelete(theLine); « 5/28/95
				«get rid of the with, then strip out spaces so they don't interfere with nthField
				theLine = string.replaceAll( theLine - "with", space, "" );
				if checkAllFields() {
					«it also performs the callbackAction
					return true}
				else {
					return false}}
			else {
				return false}};
		on handleOutlineHierarchy() {
			«5/16/96: doesn't actually check "with", but something similar
				«it's easier to add here than as a separate script since it calls initialize & restoreOutline
			categorizedName = string.nthField(string.popLeading(op.getLineText(), space), space, 1) + "." + categorizedName;
			if defined (categorizedName^) {
				restoreOutline();
				callbackAction^(categorizedName, true); « second parameter: yes it's in a "with"
				return (true)}
			else {
				return false}};
		
		case windowType {
			scriptType {
				initialize();
				if handleWith () { « 1/27/96: for cases like "with Player, keys"; 2click on keys
					return true}; « i.e. out of the whole script
				while op.go (left, 1) {
					if handleWith () {
						return true}}; « i.e. out of the whole script
				restoreOutline ();
				return false};
			outlineType { « assume it's a oneLiner (5/16/96: also handle an "object database map")
				initialize();
				local {
					theLine = string.lower(op.getLineText())};
				if theLine contains "with " { « at present: only looks at the FIRST "with"
					local {
						fromPosition = string.patternMatch("with ", theLine) + 5;
						toPosition = string.patternMatch("{", theLine);
						numChars = toPosition - fromPosition};
					«get rid of the with, then strip out spaces so they don't interfere with nthField
					theLine = string.replaceAll(string.mid(theLine, fromPosition, numChars), space, "");
					if checkAllFields() {
						«it also performs the callbackAction
						return true}} « i.e. out of the whole script
				else { « modified 5/16/96 to walk up the hierarchy
					«unlike "with", do NOT check the current line
					«categorizedName starts out as just name; that's what we want here too
					while op.go(left, 1) { « 5/16/96
						if handleOutlineHierarchy() {
							return true}}; « i.e. out of the whole script
					restoreOutline();
					return false}}}
		else {
			return false}};
	on pathToBracketedPath (s) {
		«Sunday, January 25, 1998 at 4:21:03 PM by PBS
		local (path, flinquotes, flinbrackets, fladd, flend);
		local (i, ch = "", lastch = "", piece);
		local (oneElement = "", elementList = {});
		for i = 1 to sizeOf (s) {
			fladd = false;
			flend = false;
			lastch = ch;
			ch = s [i];
			case ch {
				'"' {
					if lastch == '\\' {
						fladd = true}
					else {
						if !flinquotes {
							flinquotes = true}
						else {
							flinquotes = false}}};
				'[' {
					if !flinquotes {
						flinbrackets = true}};
				']' {
					if !flinquotes {
						flinbrackets = false}};
				'.' {
					if !flinquotes and !flinbrackets {
						flend = true}
					else {
						fladd = true}}}
			else {
				fladd = true};
			if fladd {
				oneElement = oneElement + ch};
			if flend {
				elementList = elementList + oneElement;
				oneElement = ""}};
		elementList = elementList + oneElement;
		for oneElement in elementList {
			path = path + "[\"" + oneElement + "\"]."};
		path = string.mid (path, 1, sizeOf (path) - 1); // strip off trailing dot
		return (path)};
	if not defined (user.callbacks.cmd2click) {
		new (tabletype, @user.callbacks.cmd2click)};
	local (i);
	local (bracketedName);
	for i = 1 to sizeof (user.callbacks.cmd2click) {
		local (adrScript = @user.callbacks.cmd2click [i]);
		try {
			while typeOf (adrScript^) == addressType {
				adrScript = adrScript^};
			if adrScript^ (name) {
				return (true)}}};
	
	on checkOtherTables (name, callbackAction) {
		«look in tables that UserTalk references, but aren't global ... to match "table.[name]"
			«called by my cmd2click, Cmd-Jump & possibly others
		«Pioneerware by Scott S. Lawton
		«revisions
			«3/19/96: moved to enhanced2click table, updated paths
			«5/15/95: handle subtables, e.g. "dialog.getFile" (in Simple) should NOT be bracketed
		local {
			jumpPaths = { "system.compiler.language.constants", "system.compiler.language.builtins", "system.compiler.language.keywords", "system.misc", "people", "system.verbs", "Simple"};
			path;
			test};
		for path in jumpPaths {
			test = path + "." + name; « added 5/15/95
			if defined (test^) {
				callbackAction^ (test);
				return true};
			test = path + "." + "[\"" + name + "\"]";
			if defined (test^) {
				callbackAction^ (test);
				return true}};
		return false}; « will only get here if the above fails
	on checkScript (name) {
		«look in the script itself for a local "handler"
			«called by my cmd2click, control2click, Cmd-Jump & possibly others
		«Pioneerware by Scott S. Lawton
		«revisions
			«3/19/96: moved to enhanced2click table, updated paths
			«6/17/95: created
		local {
			windowType = "Unknown"; « modified below...
			whereAmI;
			displayStatus;
			leftOfSelection = 0;
			rightOfSelection = 0};
		try {
			«the following fails for a few cases, see Simple.window.frontmostType() ... though it isn't needed here
			windowType = typeOf (window.frontmost()^)};
		on initialize() {
			displayStatus = op.getDisplay(); « want to restore it to original state
			op.setDisplay (false); « no need to show the user our travels
			if windowType equals scriptType {
				whereAmI = op.getCursor()}; « uniqueID, to restore at end
			
			if wp.inTextMode() { « doesn't apply to cmd2Click, but may to Jump
				wp.getSelect(@leftOfSelection, @rightOfSelection)}};
			«else: the left/right of selection are correct at zero
		on restoreOutline() {
			if windowType equals scriptType {
				op.setCursor(whereAmI)};
			wp.setTextMode(true);
			wp.setSelect(leftOfSelection, rightOfSelection);
			op.setDisplay(displayStatus)};
		
		if windowType equals scriptType {
			initialize();
			bundle { « set the search parameters
				user.prefs.search.casesensitive = false;
				user.prefs.search.wholewords = false;
				user.prefs.search.wraparound = true};
			op.firstSummit (); « FIND seems to take current heading as its scope
			if op.find ("on " + name) { « look for the "category" text
				wp.setTextMode (true);
				op.setDisplay (displayStatus);
				return true}
			else {
				restoreOutline ();
				return false}}
		else {
			return false}};
	on doIt (objectName, fromWith = false) { «SSL: moved standard behavior here
		if kb.optionKey () {
			local (front = window.frontMost ());
			edit (address (objectName));
			if window.getFile (front) == nil {
				window.close (front)}
			else {
				window.hide (front)}}
		else {
			edit (address (objectName))}};
	
	if defined (name^) { «simple: just jump to it
		doIt (name);
		return (true)};
	bracketedName = pathToBracketedPath (name);
	if defined (bracketedName^) {
		doIt (bracketedName);
		return (true)};
	if defined (("websites." + name)^) { //it's in the websites table
		«Saturday, January 24, 1998 at 4:03:20 PM by PBS
		doIt ("websites." + name);
		return (true)};
	if defined (("websites." + bracketedName)^) { //it's in the websites table
		«Saturday, January 24, 1998 at 4:03:20 PM by PBS
		doIt ("websites." + bracketedName);
		return (true)};
	bundle { «4.2 -- make cmd-2clicking work for macros
		«Wed, Dec 11, 1996 at 7:30:25 PM by DW
		try {
			if defined (websites.["#data"].tools) {
				if defined (websites.["#data"].tools^.[name]) {
					edit (@websites.["#data"].tools^.[name]);
					return (true)}}};
		try {
			if defined (user.html.macros.[name]) {
				edit (@user.html.macros.[name]);
				return (true)}};
		try {
			if defined (user.html.renderers.[name]) {
				edit (@user.html.renderers.[name]);
				return (true)}};
		try {
			if defined (html.data.standardMacros.[name]) {
				edit (@html.data.standardMacros.[name]);
				return (true)}}};
	if checkOtherTables (name, @doIt) { «check reserved words
		return (true)};
	if checkWith (name, @doIt) { «check every "with"
		return (true)};
	if checkScript (name) { «check this script
		return (true)};
	if file.exists (name) { // maybe it's a filename
		if sys.os () == "MacOS" {
			return (Finder.reveal (name))}
		else {
			return (webBrowser.openDocument (file.folderFromPath (name)))}};
	if name beginsWith "http://" or name beginsWith "www." { // it's a URL
		if not (name beginsWith "http://") {
			name = "http://" + name};
		if webBrowser.openURL (name) {
			webBrowser.bringToFront ()};
		return (true)};
	return (false)}


